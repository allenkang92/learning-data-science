"""
도미와 빙어 분류 프로그램 (K-최근접 이웃 알고리즘 사용)

이 프로그램은 도미와 빙어의 길이와 무게 데이터를 사용하여 K-최근접 이웃(KNN) 알고리즘으로
새로운 물고기가 도미인지 빙어인지 분류하는 머신러닝 모델을 구현합니다.

작성일: 2024-12-26
"""

import matplotlib.pyplot as plt  # matplotlib의 pyplot 모듈을 사용해 데이터 시각화를 수행합니다.
from sklearn.neighbors import KNeighborsClassifier  # 머신러닝 알고리즘 중 하나인 K-최근접 이웃(KNN) 분류기를 사용하기 위해 임포트합니다.

# 도미(bream) 데이터 정의
# 각 데이터는 실제 측정된 도미의 길이(cm)와 무게(g) 값입니다.
bream_length = [25.4, 26.3, 26.5, 29.0, 29.0, 29.7, 29.7, 30.0, 30.0, 30.7, 31.0, 31.0, 
                31.5, 32.0, 32.0, 32.0, 33.0, 33.0, 33.5, 33.5, 34.0, 34.0, 34.5, 35.0, 
                35.0, 35.0, 35.0, 36.0, 36.0, 37.0, 38.5, 38.5, 39.5, 41.0, 41.0]

bream_weight = [242.0, 290.0, 340.0, 363.0, 430.0, 450.0, 500.0, 390.0, 450.0, 500.0, 
                475.0, 500.0, 500.0, 340.0, 600.0, 600.0, 700.0, 700.0, 610.0, 650.0, 
                575.0, 685.0, 620.0, 680.0, 700.0, 725.0, 720.0, 714.0, 850.0, 1000.0, 
                920.0, 955.0, 925.0, 975.0, 950.0]

# 빙어(smelt) 데이터 정의
# 각 데이터는 실제 측정된 빙어의 길이(cm)와 무게(g) 값입니다.
smelt_length = [9.8, 10.5, 10.6, 11.0, 11.2, 11.3, 11.8, 11.8, 12.0, 12.2, 12.4, 13.0, 
                14.3, 15.0]

smelt_weight = [6.7, 7.5, 7.0, 9.7, 9.8, 8.7, 10.0, 9.9, 9.8, 12.2, 13.4, 12.2, 
                19.7, 19.9]

# 데이터 전처리
# 도미와 빙어의 데이터를 하나의 리스트로 결합합니다.
length = bream_length + smelt_length  # 모든 물고기의 길이 데이터
weight = bream_weight + smelt_weight  # 모든 물고기의 무게 데이터

# 머신러닝 모델에 입력할 수 있는 형태로 데이터를 변환합니다.
# 각 물고기의 길이와 무게를 쌍으로 묶어 2차원 리스트를 만듭니다.
fish_data = [[l, w] for l, w in zip(length, weight)]

# 타깃(정답) 데이터 생성
# 도미는 1, 빙어는 0으로 라벨링합니다.
# 도미 35마리, 빙어 14마리에 대한 라벨을 순서대로 생성합니다.
fish_target = [1] * 35 + [0] * 14

# K-최근접 이웃 분류기 모델 생성 및 학습
kn = KNeighborsClassifier()  # 기본 하이퍼파라미터로 KNN 모델을 초기화합니다.
kn.fit(fish_data, fish_target)  # 준비된 데이터로 모델을 학습시킵니다.

# 새로운 물고기 데이터로 예측 수행
# 길이가 30cm, 무게가 600g인 물고기가 도미인지 빙어인지 예측합니다.
prediction = kn.predict([[30, 600]])

# 데이터 시각화
# 산점도를 그려 도미와 빙어의 분포를 확인합니다.
plt.scatter(bream_length, bream_weight, label='bream')  # 도미 데이터 (파란색 점)
plt.scatter(smelt_length, smelt_weight, label='smelt')  # 빙어 데이터 (주황색 점)
plt.scatter(30, 600, marker='^', label='prediction')    # 예측하려는 데이터 포인트 (삼각형)
plt.xlabel('length')  # x축: 물고기의 길이
plt.ylabel('weight')  # y축: 물고기의 무게
plt.legend()          # 범례 표시
plt.show()            # 그래프 출력